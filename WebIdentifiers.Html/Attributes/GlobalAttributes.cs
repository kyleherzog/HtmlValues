namespace WebIdentifiers.Html.Attributes
{
    /// <summary>
    /// Provides access to the attributes that are common to all HTML elements.
    /// </summary>
    public class GlobalAttributes
    {
        /// <summary>
        /// Gets the name of the <c>accesskey</c> attribute. This provides a hint for generating a keyboard shortcut for the current element.
        /// The value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard).
        /// </summary>
        public string AccessKey => HtmlAttributes.AccessKey;

        /// <summary>
        /// Gets the name of the <c>autocapitalize</c> attribute. This is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user.
        /// </summary>
        public string AutoCapitalize => HtmlAttributes.AutoCapitalize;

        /// <summary>
        /// Gets the name of the <c>autofocus</c> attribute. This is a Boolean attribute indicating that the element should be focused on page load, or when the dialog that it is part of is displayed.
        /// </summary>
        public string AutoFocus => HtmlAttributes.AutoFocus;

        /// <summary>
        /// Gets the name of the <c>class</c> attribute. This is a space-separated list of the case-sensitive classes of the element.
        /// </summary>
        public string Class => HtmlAttributes.Class;

        /// <summary>
        /// Gets the name of the <c>contenteditable</c> attribute. This is an enumerated attribute indicating if the element should be editable by the user.
        /// </summary>
        public string ContentEditable => HtmlAttributes.ContentEditable;

        /// <summary>
        /// Gets the name of the <c>dir</c> attribute. This is an enumerated attribute indicating the directionality of the element's text.
        /// </summary>
        public string Dir => HtmlAttributes.Dir;

        /// <summary>
        /// Gets the name of the <c>draggable</c> attribute. This is an enumerated attribute indicating whether the element can be dragged.
        /// </summary>
        public string Draggable => HtmlAttributes.Draggable;

        /// <summary>
        /// Gets the name of the <c>enterkeyhint</c> attribute. This is an enumerated attribute defining what action label (or icon) to present for the enter key on virtual keyboards.
        /// </summary>
        public string EnterKeyHint => HtmlAttributes.EnterKeyHint;

        /// <summary>
        /// Gets the name of the <c>hidden</c> attribute. This is an enumerated attribute indicating that the browser should not render the contents of the element.
        /// </summary>
        public string Hidden => HtmlAttributes.Hidden;

        /// <summary>
        /// Gets the name of the <c>id</c> attribute. This defines a unique identifier (ID) which must be unique in the whole document.
        /// </summary>
        public string Id => HtmlAttributes.Id;

        /// <summary>
        /// Gets the name of the <c>Inert</c> attribute. This is a Boolean attribute indicating whether the browser will ignore the element.
        /// </summary>
        public string Inert => HtmlAttributes.Inert;

        /// <summary>
        /// Gets the name of the <c>inputmode</c> attribute. This is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents.
        /// This allows a browser to display an appropriate virtual keyboard for data entry.
        /// </summary>
        public string InputMode => HtmlAttributes.InputMode;

        /// <summary>
        /// Gets the name of the <c>is</c> attribute. This allows you to specify that a standard HTML element should behave like a registered custom built-in element.
        /// </summary>
        public string Is => HtmlAttributes.Is;

        /// <summary>
        /// Gets the name of the <c>itemid</c> attribute. This provides microdata in the form of a unique, global identifier for an item.
        /// </summary>
        public string ItemId => HtmlAttributes.ItemId;

        /// <summary>
        /// Gets the name of the <c>itemprop</c> attribute. This is used to add properties to an item. Th value consists of a name-value pair.
        /// </summary>
        public string ItemProp => HtmlAttributes.ItemProp;

        /// <summary>
        /// Gets the name of the <c>itemref</c> attribute. This provides a list of element IDs elsewhere in the document with additional properties for the item.
        /// </summary>
        public string ItemRef => HtmlAttributes.ItemRef;

        /// <summary>
        /// Gets the name of the <c>itemscope</c> attribute. This is a Boolean attribute that indicates that the element and its children are part of a global microdata item.
        /// </summary>
        public string ItemScope => HtmlAttributes.ItemScope;

        /// <summary>
        /// Gets the name of the <c>itemtype</c> attribute. This specifies the URL of the vocabulary that will be used to define itemprops in the data structure.
        /// </summary>
        public string ItemType => HtmlAttributes.ItemType;

        /// <summary>
        /// Gets the name of the <c>lang</c> attribute. This helps define the language of an element: the language that non-editable elements are written in or the language that editable elements should be written in by the user.
        /// </summary>
        public string Lang => HtmlAttributes.Lang;

        /// <summary>
        /// Gets the name of the <c>Part</c> attribute. This contains a space-separated list of the part names of the element.
        /// </summary>
        public string Part => HtmlAttributes.Part;

        /// <summary>
        /// Gets the name of the <c>Role</c> attribute.
        /// </summary>
        public string Role => HtmlAttributes.Role;

        /// <summary>
        /// Gets the name of the <c>slot</c> attribute. This assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <c>slot</c> element whose name attribute's value matches that slot attribute's value.
        /// </summary>
        public string Slot => HtmlAttributes.Slot;

        /// <summary>
        /// Gets the name of the <c>spellcheck</c> attribute. This is an enumerated attribute that specifies whether the element represents an element whose contents are subject to spell checking.
        /// </summary>
        public string SpellCheck => HtmlAttributes.SpellCheck;

        /// <summary>
        /// Gets the name of the <c>style</c> attribute. This contains CSS styling declarations to be applied to the element.
        /// </summary>
        public string Style => HtmlAttributes.Style;

        /// <summary>
        /// Gets the name of the <c>tabindex</c> attribute. This allows developers to make elements focusable and defines the order of the element for sequential focus navigation.
        /// </summary>
        public string TabIndex => HtmlAttributes.TabIndex;

        /// <summary>
        /// Gets the name of the <c>title</c> attribute. This contains text representing advisory information related to the element to which it belongs.
        /// </summary>
        public string Title => HtmlAttributes.Title;

        /// <summary>
        /// Gets the name of the <c>translate</c> attribute. This is an enumerated attribute that specifies whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
        /// </summary>
        public string Translate => HtmlAttributes.Translate;

        /// <summary>
        /// Gets the name of the specified <c>data-</c> prefixed attribute. This is a data attribute that adds custom data to an element.
        /// </summary>
        /// <param name="name">The data attribute name that is to be prefixed with <c>data-</c>.</param>
        /// <returns>The full data attribute name.</returns>
        public string DataDash(string name) => $"{HtmlAttributes.Data}-{name}";
    }
}